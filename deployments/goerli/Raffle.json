{
  "address": "0xB72D82FE6a3E97DAc98E4fBCFAC297D4a340Df20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "updateInterval",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffel__Transfer_Failed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NoEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playersLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "lotteryInEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerList",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterInLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getIndexedPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredAmountToEnter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdb06b5bcdd2af6426d376373a12ab77dcc34b7161bba4f01e5e7b96937635a9",
  "receipt": {
    "to": null,
    "from": "0xDdBb3196e19700af3a3CB7B866a5e06068EC2C40",
    "contractAddress": "0xB72D82FE6a3E97DAc98E4fBCFAC297D4a340Df20",
    "transactionIndex": 47,
    "gasUsed": "1201734",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe07cc27c5c29cf81f275cf5a3395d07351b657aebda2f9903baf34fc2e6cc52a",
    "transactionHash": "0xbdb06b5bcdd2af6426d376373a12ab77dcc34b7161bba4f01e5e7b96937635a9",
    "logs": [],
    "blockNumber": 7769135,
    "cumulativeGasUsed": "10701629",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x271682DEB8C4E0901D1a1550aD2e64D568E69909",
    "4000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "2500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "db3f96e364f5d0a3f1c682522c43b42b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateInterval\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffel__Transfer_Failed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NoEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"lotteryInEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterInLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getIndexedPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredAmountToEnter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"function declerations \"},\"getLatestWinner()\":{\"notice\":\"views and pure function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror Raffle__NoEnoughETH();\\nerror Raffel__Transfer_Failed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpKeepNotNeeded(uint256 contractBalance, uint256 playersLength, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum RaffleState {\\n        OPENED,\\n        CALCULATING\\n    }\\n\\n    address payable[] s_players;\\n    uint256 private immutable i_minimum_to_enter;\\n    VRFCoordinatorV2Interface private immutable vrfCoordinatorV2;\\n    uint16 private constant NUM_WORDS = 1;\\n    uint16 private constant requestConfirmations = 3;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 public immutable i_interval;\\n    bytes32 immutable i_gasLane;\\n    RaffleState private s_state;\\n    uint256 private s_lastTimeStamp;\\n    address private s_latestWinner;\\n\\n    event lotteryInEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event winnerList(address indexed winner);\\n\\n    /**function declerations */\\n    constructor(\\n        uint256 min,\\n        address vrfCoordinator,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        uint32 updateInterval\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        i_minimum_to_enter = min;\\n        vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinator);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_interval = updateInterval;\\n        s_state = RaffleState.OPENED;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    function enterInLottery() public payable {\\n        if (msg.value < i_minimum_to_enter) {\\n            revert Raffle__NoEnoughETH();\\n        }\\n        if ((s_state != RaffleState.OPENED)) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit lotteryInEnter(msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        address winner = s_players[randomWords[0] % s_players.length];\\n        s_latestWinner = winner;\\n        s_state = RaffleState.OPENED;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        (bool sucess, ) = payable(s_latestWinner).call{value: address(this).balance}(\\\"\\\");\\n        if (!sucess) revert Raffel__Transfer_Failed();\\n        emit winnerList(s_latestWinner);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpened = (s_state == RaffleState.OPENED);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasBalance = address(this).balance > 0;\\n        bool isNotEmpty = s_players.length > 0;\\n        upkeepNeeded = (isOpened && timePassed && hasBalance && isNotEmpty);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_state)\\n            );\\n        }\\n        s_state = RaffleState.CALCULATING;\\n        uint256 requestId = vrfCoordinatorV2.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            requestConfirmations,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    /**\\n     * views and pure function\\n     */\\n    function getLatestWinner() public view returns (address) {\\n        return s_latestWinner;\\n    }\\n\\n    function getRequiredAmountToEnter() public view returns (uint256) {\\n        return i_minimum_to_enter;\\n    }\\n\\n    function getIndexedPlayer(uint256 index) public view returns (address) {\\n        return (s_players[index]);\\n    }\\n\\n    function getRaffleState() public view returns (uint256) {\\n        return uint256(s_state);\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n}\\n\",\"keccak256\":\"0x295ec835cff600ba779e7507c1e754d179a58e3d01d55e1b73b459f3d3c61f84\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001821380380620018218339818101604052810190620000389190620001bc565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508367ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508261014081815250508163ffffffff166101008163ffffffff1660e01b815250508063ffffffff166101208163ffffffff1660e01b815250506000600160006101000a81548160ff02191690836001811115620001315762000130620002c4565b5b0217905550426002819055505050505050506200037a565b6000815190506200015a81620002f8565b92915050565b600081519050620001718162000312565b92915050565b60008151905062000188816200032c565b92915050565b6000815190506200019f8162000346565b92915050565b600081519050620001b68162000360565b92915050565b60008060008060008060c08789031215620001dc57620001db620002f3565b5b6000620001ec89828a0162000177565b9650506020620001ff89828a0162000149565b95505060406200021289828a01620001a5565b94505060606200022589828a0162000160565b93505060806200023889828a016200018e565b92505060a06200024b89828a016200018e565b9150509295509295509295565b6000620002658262000276565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620003038162000258565b81146200030f57600080fd5b50565b6200031d816200026c565b81146200032957600080fd5b50565b620003378162000296565b81146200034357600080fd5b50565b6200035181620002a0565b81146200035d57600080fd5b50565b6200036b81620002b0565b81146200037757600080fd5b50565b60805160601c60a05160c05160601c60e05160c01c6101005160e01c6101205160e01c61014051611428620003f9600039600061060501526000818161079101526107f50152600061064901526000610626015260006105c90152600081816103a501526108690152600081816102db015261032f01526114286000f3fe6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a14610189578063673ab11e146101b45780636919207d146101f15780636e04ff0d1461021c578063d651205b1461025a578063fd6673f514610285576100a7565b8063115cbaf5146100ac5780631fe543e3146100d7578063320229eb1461010057806333592fef1461012b5780634585e33b146101355780634fdd3b641461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce919061103a565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610e2e565b6102d9565b005b34801561010c57600080fd5b50610115610399565b604051610122919061103a565b60405180910390f35b6101336103a3565b005b34801561014157600080fd5b5061015c60048036038101906101579190610d3e565b610512565b005b34801561016a57600080fd5b50610173610711565b6040516101809190610f73565b60405180910390f35b34801561019557600080fd5b5061019e61073b565b6040516101ab919061103a565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d69190610dd4565b610748565b6040516101e89190610f73565b60405180910390f35b3480156101fd57600080fd5b5061020661078f565b604051610213919061108c565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190610d8b565b6107b3565b604051610251929190610fb7565b60405180910390f35b34801561026657600080fd5b5061026f610865565b60405161027c919061103a565b60405180910390f35b34801561029157600080fd5b5061029a61088d565b6040516102a7919061103a565b60405180910390f35b6000600160009054906101000a900460ff1660018111156102d4576102d361131c565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610382929190610f8e565b60405180910390fd5b6103958282610899565b5050565b6000600254905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156103fd576040517f1659bc4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104115761041061131c565b5b600160009054906101000a900460ff1660018111156104335761043261131c565b5b1461046a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce102677f69c8fb15592fb409c30cb1d337bec162f00b0339898e97b3753c2c760405160405180910390a2565b600061052c604051806020016040528060008152506107b3565b5090508061059b5747600080549050600160009054906101000a900460ff16600181111561055d5761055c61131c565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161059293929190611055565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156105c0576105bf61131c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161068a959493929190610fe7565b602060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190610e01565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b600080828154811061075d5761075c61134b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060018111156107cc576107cb61131c565b5b600160009054906101000a900460ff1660018111156107ee576107ed61131c565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16600254426108289190611150565b119050600080471190506000806000805490501190508380156108485750825b80156108515750815b801561085a5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b600080600080549050836000815181106108b6576108b561134b565b5b60200260200101516108c8919061128d565b815481106108d9576108d861134b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561096d5761096c61131c565b5b0217905550600067ffffffffffffffff81111561098d5761098c61137a565b5b6040519080825280602002602001820160405280156109bb5781602001602082028036833780820191505090505b50600090805190602001906109d1929190610b09565b50426002819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a2190610f5e565b60006040518083038185875af1925050503d8060008114610a5e576040519150601f19603f3d011682016040523d82523d6000602084013e610a63565b606091505b5050905080610a9e576040517fafb4746200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f54ea1631ac4de14440b7ddc5c58ddeafd390f4d5531c33c650c3ea3b102c0e3e60405160405180910390a250505050565b828054828255906000526020600020908101928215610b82579160200282015b82811115610b815782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b29565b5b509050610b8f9190610b93565b5090565b5b80821115610bac576000816000905550600101610b94565b5090565b6000610bc3610bbe846110cc565b6110a7565b90508083825260208201905082856020860282011115610be657610be56113b3565b5b60005b85811015610c165781610bfc8882610d14565b845260208401935060208301925050600181019050610be9565b5050509392505050565b6000610c33610c2e846110f8565b6110a7565b905082815260208101848484011115610c4f57610c4e6113b8565b5b610c5a84828561121a565b509392505050565b600082601f830112610c7757610c766113ae565b5b8135610c87848260208601610bb0565b91505092915050565b60008083601f840112610ca657610ca56113ae565b5b8235905067ffffffffffffffff811115610cc357610cc26113a9565b5b602083019150836001820283011115610cdf57610cde6113b3565b5b9250929050565b600082601f830112610cfb57610cfa6113ae565b5b8135610d0b848260208601610c20565b91505092915050565b600081359050610d23816113db565b92915050565b600081519050610d38816113db565b92915050565b60008060208385031215610d5557610d546113c2565b5b600083013567ffffffffffffffff811115610d7357610d726113bd565b5b610d7f85828601610c90565b92509250509250929050565b600060208284031215610da157610da06113c2565b5b600082013567ffffffffffffffff811115610dbf57610dbe6113bd565b5b610dcb84828501610ce6565b91505092915050565b600060208284031215610dea57610de96113c2565b5b6000610df884828501610d14565b91505092915050565b600060208284031215610e1757610e166113c2565b5b6000610e2584828501610d29565b91505092915050565b60008060408385031215610e4557610e446113c2565b5b6000610e5385828601610d14565b925050602083013567ffffffffffffffff811115610e7457610e736113bd565b5b610e8085828601610c62565b9150509250929050565b610e9381611184565b82525050565b610ea281611196565b82525050565b610eb1816111a2565b82525050565b6000610ec282611129565b610ecc8185611134565b9350610edc818560208601611229565b610ee5816113c7565b840191505092915050565b6000610efd600083611145565b9150610f08826113d8565b600082019050919050565b610f1c816111ac565b82525050565b610f2b81611208565b82525050565b610f3a816111da565b82525050565b610f49816111e4565b82525050565b610f58816111f4565b82525050565b6000610f6982610ef0565b9150819050919050565b6000602082019050610f886000830184610e8a565b92915050565b6000604082019050610fa36000830185610e8a565b610fb06020830184610e8a565b9392505050565b6000604082019050610fcc6000830185610e99565b8181036020830152610fde8184610eb7565b90509392505050565b600060a082019050610ffc6000830188610ea8565b6110096020830187610f4f565b6110166040830186610f13565b6110236060830185610f40565b6110306080830184610f22565b9695505050505050565b600060208201905061104f6000830184610f31565b92915050565b600060608201905061106a6000830186610f31565b6110776020830185610f31565b6110846040830184610f31565b949350505050565b60006020820190506110a16000830184610f40565b92915050565b60006110b16110c2565b90506110bd828261125c565b919050565b6000604051905090565b600067ffffffffffffffff8211156110e7576110e661137a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111135761111261137a565b5b61111c826113c7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061115b826111da565b9150611166836111da565b925082821015611179576111786112be565b5b828203905092915050565b600061118f826111ba565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611213826111ac565b9050919050565b82818337600083830152505050565b60005b8381101561124757808201518184015260208101905061122c565b83811115611256576000848401525b50505050565b611265826113c7565b810181811067ffffffffffffffff821117156112845761128361137a565b5b80604052505050565b6000611298826111da565b91506112a3836111da565b9250826112b3576112b26112ed565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6113e4816111da565b81146113ef57600080fd5b5056fea2646970667358221220fa64798e3c40a1493bd990abb24336b480859336e813913c46e2dd4856fd224064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a14610189578063673ab11e146101b45780636919207d146101f15780636e04ff0d1461021c578063d651205b1461025a578063fd6673f514610285576100a7565b8063115cbaf5146100ac5780631fe543e3146100d7578063320229eb1461010057806333592fef1461012b5780634585e33b146101355780634fdd3b641461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce919061103a565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610e2e565b6102d9565b005b34801561010c57600080fd5b50610115610399565b604051610122919061103a565b60405180910390f35b6101336103a3565b005b34801561014157600080fd5b5061015c60048036038101906101579190610d3e565b610512565b005b34801561016a57600080fd5b50610173610711565b6040516101809190610f73565b60405180910390f35b34801561019557600080fd5b5061019e61073b565b6040516101ab919061103a565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d69190610dd4565b610748565b6040516101e89190610f73565b60405180910390f35b3480156101fd57600080fd5b5061020661078f565b604051610213919061108c565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190610d8b565b6107b3565b604051610251929190610fb7565b60405180910390f35b34801561026657600080fd5b5061026f610865565b60405161027c919061103a565b60405180910390f35b34801561029157600080fd5b5061029a61088d565b6040516102a7919061103a565b60405180910390f35b6000600160009054906101000a900460ff1660018111156102d4576102d361131c565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610382929190610f8e565b60405180910390fd5b6103958282610899565b5050565b6000600254905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156103fd576040517f1659bc4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104115761041061131c565b5b600160009054906101000a900460ff1660018111156104335761043261131c565b5b1461046a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce102677f69c8fb15592fb409c30cb1d337bec162f00b0339898e97b3753c2c760405160405180910390a2565b600061052c604051806020016040528060008152506107b3565b5090508061059b5747600080549050600160009054906101000a900460ff16600181111561055d5761055c61131c565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161059293929190611055565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156105c0576105bf61131c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161068a959493929190610fe7565b602060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190610e01565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b600080828154811061075d5761075c61134b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060018111156107cc576107cb61131c565b5b600160009054906101000a900460ff1660018111156107ee576107ed61131c565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16600254426108289190611150565b119050600080471190506000806000805490501190508380156108485750825b80156108515750815b801561085a5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b600080600080549050836000815181106108b6576108b561134b565b5b60200260200101516108c8919061128d565b815481106108d9576108d861134b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561096d5761096c61131c565b5b0217905550600067ffffffffffffffff81111561098d5761098c61137a565b5b6040519080825280602002602001820160405280156109bb5781602001602082028036833780820191505090505b50600090805190602001906109d1929190610b09565b50426002819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a2190610f5e565b60006040518083038185875af1925050503d8060008114610a5e576040519150601f19603f3d011682016040523d82523d6000602084013e610a63565b606091505b5050905080610a9e576040517fafb4746200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f54ea1631ac4de14440b7ddc5c58ddeafd390f4d5531c33c650c3ea3b102c0e3e60405160405180910390a250505050565b828054828255906000526020600020908101928215610b82579160200282015b82811115610b815782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b29565b5b509050610b8f9190610b93565b5090565b5b80821115610bac576000816000905550600101610b94565b5090565b6000610bc3610bbe846110cc565b6110a7565b90508083825260208201905082856020860282011115610be657610be56113b3565b5b60005b85811015610c165781610bfc8882610d14565b845260208401935060208301925050600181019050610be9565b5050509392505050565b6000610c33610c2e846110f8565b6110a7565b905082815260208101848484011115610c4f57610c4e6113b8565b5b610c5a84828561121a565b509392505050565b600082601f830112610c7757610c766113ae565b5b8135610c87848260208601610bb0565b91505092915050565b60008083601f840112610ca657610ca56113ae565b5b8235905067ffffffffffffffff811115610cc357610cc26113a9565b5b602083019150836001820283011115610cdf57610cde6113b3565b5b9250929050565b600082601f830112610cfb57610cfa6113ae565b5b8135610d0b848260208601610c20565b91505092915050565b600081359050610d23816113db565b92915050565b600081519050610d38816113db565b92915050565b60008060208385031215610d5557610d546113c2565b5b600083013567ffffffffffffffff811115610d7357610d726113bd565b5b610d7f85828601610c90565b92509250509250929050565b600060208284031215610da157610da06113c2565b5b600082013567ffffffffffffffff811115610dbf57610dbe6113bd565b5b610dcb84828501610ce6565b91505092915050565b600060208284031215610dea57610de96113c2565b5b6000610df884828501610d14565b91505092915050565b600060208284031215610e1757610e166113c2565b5b6000610e2584828501610d29565b91505092915050565b60008060408385031215610e4557610e446113c2565b5b6000610e5385828601610d14565b925050602083013567ffffffffffffffff811115610e7457610e736113bd565b5b610e8085828601610c62565b9150509250929050565b610e9381611184565b82525050565b610ea281611196565b82525050565b610eb1816111a2565b82525050565b6000610ec282611129565b610ecc8185611134565b9350610edc818560208601611229565b610ee5816113c7565b840191505092915050565b6000610efd600083611145565b9150610f08826113d8565b600082019050919050565b610f1c816111ac565b82525050565b610f2b81611208565b82525050565b610f3a816111da565b82525050565b610f49816111e4565b82525050565b610f58816111f4565b82525050565b6000610f6982610ef0565b9150819050919050565b6000602082019050610f886000830184610e8a565b92915050565b6000604082019050610fa36000830185610e8a565b610fb06020830184610e8a565b9392505050565b6000604082019050610fcc6000830185610e99565b8181036020830152610fde8184610eb7565b90509392505050565b600060a082019050610ffc6000830188610ea8565b6110096020830187610f4f565b6110166040830186610f13565b6110236060830185610f40565b6110306080830184610f22565b9695505050505050565b600060208201905061104f6000830184610f31565b92915050565b600060608201905061106a6000830186610f31565b6110776020830185610f31565b6110846040830184610f31565b949350505050565b60006020820190506110a16000830184610f40565b92915050565b60006110b16110c2565b90506110bd828261125c565b919050565b6000604051905090565b600067ffffffffffffffff8211156110e7576110e661137a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111135761111261137a565b5b61111c826113c7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061115b826111da565b9150611166836111da565b925082821015611179576111786112be565b5b828203905092915050565b600061118f826111ba565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611213826111ac565b9050919050565b82818337600083830152505050565b60005b8381101561124757808201518184015260208101905061122c565b83811115611256576000848401525b50505050565b611265826113c7565b810181811067ffffffffffffffff821117156112845761128361137a565b5b80604052505050565b6000611298826111da565b91506112a3836111da565b9250826112b3576112b26112ed565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6113e4816111da565b81146113ef57600080fd5b5056fea2646970667358221220fa64798e3c40a1493bd990abb24336b480859336e813913c46e2dd4856fd224064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "function declerations "
      },
      "getLatestWinner()": {
        "notice": "views and pure function"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1198,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_state",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(RaffleState)1195"
      },
      {
        "astId": 1222,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1224,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_latestWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1195": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}